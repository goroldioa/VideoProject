Документация к программе захвата кадров с камер "Video.py"

Инструкция по использованию:
	1. Создать 4 папки с названиями камер для сохранения кадров. Создать папки можно в любой директории.
	2. Подключить 1 usb и 3 ip камеры к компьютеру.
	3. Запустить тесты для проверки корректной работы программы (Опционально)
	5. Запустить программу.
	При первом запуске:
		6. Указать настройки,ip, папки записи для камер.
	При повторном запуске:
		6. При необходимости изменить настройки
	8. Дождаться подключения камер (примерно 10 секунд).
	9. Провести съемку.
	10. Завершить программу нажатием "Ctrl" + "C".

Дополнение к инструкции:
	1. Если программа остановилась или завершилась по неизвестной причине можно обратиться к логам. Название файла "my_log.txt", он находится в одной 
	директории с программой.
	2. Если необходимо изменить номер итерации программы, сделать это можно в файле "start_count.txt", который находится в одной директории с программой.
	3. Если программа не получит доступ к одной или нескольким камерам, она предложит остановить ее для устранения неполадок или продолжить выполнение с 
	камерами, которые смогли подключиться.

Описание функций:
	1. error_handling(errors, stop_event)

	Обрабатывает ошибки открытия камер. Выводит сообщение об ошибке для каждой неоткрывшейся камеры и спрашивает пользователя, следует ли продолжить 
	выполнение программы. Если пользователь выбирает продолжить, запускает отдельный поток для отображения сообщения об ошибке. В случае отказа пользователя, 
	останавливает выполнение программы.
	
	2. create_error_image(text="ERROR", size=(200, 400), color=(0, 0, 255), thickness=2, font_scale=2)

	Создает изображение заданного размера с текстом об ошибке. Позволяет настраивать текст, размер изображения, цвет текста, толщину текста и масштаб шрифта.
 	Возвращает изображение с ошибкой или None в случае ошибки.
	
	3. show_error(index, stop_event)

	Отображает изображение об ошибке для указанной камеры в отдельном окне. Функция работает в цикле, пока не получит сигнал остановки через stop_event. 
	Также позиционирует окно с помощью функции position_window.

	4. position_window(window_name, index, num_windows_per_row=2)

	Размещает окно с указанным именем (window_name) на экране в виде сетки. index определяет позицию окна в сетке, а num_windows_per_row задает количество 
	окон в каждой строке. Функция рассчитывает координаты окна на основе этих параметров и перемещает окно с помощью cv2.moveWindow. Обрабатывает и логирует 
	потенциальные исключения.

	5. capture_and_save(cap, folder_name, fps, index, start_count, stop_event)

	Захватывает кадры с указанной камеры (cap) и сохраняет их в формате JPG в указанную папку (folder_name). Имя файла включает номер кадра и начальный 
	счетчик (start_count). Функция отображает видеопоток с текущим значением FPS в реальном времени. Запись продолжается, пока не будет установлен флаг 
	остановки (stop_event). Параметр fps задает целевую частоту кадров. index используется для позиционирования окна.

	6. connection(ip, fps, folder_name, width, height, index, start_count, timeout=10)

	Пытается установить соединение с камерой по заданному IP-адресу (ip). Настраивает параметры камеры, такие как разрешение (width, height) и размер буфера.
	Ожидает получения кадров в течение заданного времени ожидания (timeout). В случае успеха выводит сообщение об успешном подключении и запускает захват и 
	сохранение видео (capture_and_save). В случае неудачи добавляет индекс камеры в очередь ошибок. Параметр fps задает целевую частоту кадров, folder_name 
	- папку для сохранения, index - индекс камеры, start_count - начальное значение счетчика кадров. Функция обрабатывает исключения и освобождает ресурсы 
	камеры в случае неудачи.

	7. getting_settings()

	Функция загружает настройки из файла settings.ini. Если файл существует и корректен, предлагает пользователю изменить текущие настройки. Если файл не 
	существует, поврежден или пользователь соглашается на изменение, функция запрашивает у пользователя новые значения настроек через диалоговые окна. 
	Настройки включают FPS, ширину и высоту кадра, индекс USB-камеры, папку для сохранения с USB-камеры, адреса и папки для сохранения для трех IP-камер. 
	После получения всех настроек, функция сохраняет их в settings.ini и возвращает их в виде кортежа.

	8. start_counter()

	Функция читает текущее значение счетчика из файла start_count.txt, увеличивает его на 1, записывает новое значение обратно в файл и возвращает исходное 
	значение. Если файл не существует, создает его, записывает в него "1" и возвращает 1. Также добавлена обработка ошибок для предотвращения непредвиденных 
	ситуаций.

	9. main()

	Основная функция программы, которая инициализирует и запускает потоки для захвата видео с USB и IP камер.

	a. Инициализация:
   		⦁ Считывает начальное значение счетчика из файла с помощью start_counter().
   		⦁ Загружает настройки пользователя с помощью getting_settings().

	b. Запуск потоков для IP камер:
   		⦁ Создает и запускает поток для каждой IP камеры, передавая в функцию connection() необходимые параметры (адрес, FPS, папку для сохранения, 
		ширину, высоту, индекс камеры и начальное значение счетчика).
   		⦁ Обрабатывает потенциальные исключения при запуске потоков.

	c. Запуск потока для USB камеры:
   		⦁ Создает и запускает поток для USB камеры с задержкой в 10 секунд (time.sleep(10)), возможно, чтобы дать время на инициализацию IP камер.
   		⦁ Обрабатывает потенциальные исключения.

	d. Обработка ошибок и ожидание завершения:
   		⦁ В цикле проверяет очередь ошибок (errors_queue) с помощью функции error_handling() (не представлена в коде, но предполагается, что она 
		обрабатывает ошибки, возникшие в потоках).
   		⦁ Проверяет нажатие комбинации клавиш Ctrl+C для завершения программы.
   		⦁ Проверяет флаг остановки stop_event.
  		 ⦁ Обрабатывает потенциальные исключения в главном цикле.

	e. Завершение:
   		⦁ Дожидается завершения всех потоков с помощью thread.join().